rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    match /groups/{groupId} {
      // Helper functions now check the 'members' map for roles, which is fine for single-doc operations
      function isCreator() {
        return get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] in ['admin', 'creator'];
      }
      function isAdmin() {
        return get(/databases/$(database)/documents/groups/$(groupId)).data.members[request.auth.uid] == 'admin';
      }

      // Read rules now check the 'memberIds' array, allowing for secure queries and gets.
      allow read: if request.auth.uid in resource.data.memberIds;
      
      allow create: if request.auth != null;
      allow update: if isAdmin();
      allow delete: if get(/databases/$(database)/documents/groups/$(groupId)).data.owner == request.auth.uid;

      match /songs/{songId} {
        // To read a song, you must be a member of the parent group.
        allow read: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
        allow write: if isCreator();
      }

      match /rehearsals/{rehearsalId} {
        // To read a rehearsal, you must be a member of the parent group.
        allow read: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
        // To create a rehearsal, you must be a member of the parent group.
        allow create: if request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds;
        allow delete: if isAdmin() || resource.data.createdBy == request.auth.uid;
        allow update: if false;
      }
    }
  }
}